"------------------------------------------------------------------------------
" QUICK REFERENCE
"------------------------------------------------------------------------------
" help quickref
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" GENERAL CONFIG
"------------------------------------------------------------------------------
set shell=/bin/zsh
set nocompatible
" help language should be English
set helplang=en
" lang to use for menu translations
set langmenu=none
" make backspace work normally on *NIX systems
set backspace=indent,eol,start
" always save as utf-8
set fileencodings=utf-8
set termencoding=utf-8
" Enable filetype detection
" filetype on
filetype off
" load filetype specific plugins
filetype plugin on
" different indentation by filetype
filetype indent on
" Set to auto read when a file is changed from the outside
set autoread
" dont wrap text
set nowrap
" show line numbers
set number
" show column position
set ruler
" ignore case when searching
set ignorecase
" dont ignore case if capital letters are present
set smartcase
" highlight searched things
set hlsearch
" highlight search chars as they are types
set incsearch
" no error bells
set noerrorbells
" Allow specified keys that move the cursor left/right to move to the prev/next line
set whichwrap+=h,l
" Turn backup off, since most stuff is in git anyway...
set nobackup
set nowb
set noswapfile
" CODE FOLDING
" fold based on indent
set foldmethod=indent
" deepest fold is 10 levels
set foldnestmax=10
" no fold by default
set nofoldenable
set foldlevel=1
" Autocomplete with OmniComplete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" Persistent undo
set undodir=~/.vim_runtime/undodir
set undofile
" TABS
set expandtab
set softtabstop=2
set shiftwidth=2
set smarttab
set smartindent
" STATUS LINE
" Show current git branch
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:â–¸\ ,eol:Â¬
set listchars+=trail:Â·
set listchars+=nbsp:f
" use the OS clipboard
set clipboard=unnamed

" Maintain more context around the cursor
set scrolloff=3

"------------------------------------------------------------------------------
" COLORS
"------------------------------------------------------------------------------
" syntax highlighting
syn on
"Higlight current line only in insert mode
autocmd InsertLeave * set nocursorline
autocmd InsertEnter * set cursorline
"Invisible character colors
highlight NonText guifg=#236360
highlight SpecialKey guifg=#044A46
" warning for beyond the 80th column
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

"------------------------------------------------------------------------------
" Functions
"------------------------------------------------------------------------------
" function to strip all trailing spaces
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Jump to the last position of a file when opening it again
if has("autocmd")
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif

"------------------------------------------------------------------------------
" SHORTCUT KEY MAPPINGS
"------------------------------------------------------------------------------
" Set <leader> to comma
let mapleader=","
" clear search highlights
noremap <silent><Leader>/ :nohls<CR>
" shortcut to change windows (and maximize if up/down)
map <C-H> <C-w>h
map <C-L> <C-w>l
map <C-K> <C-W>k<C-W>_
map <C-J> <C-W>j<C-W>_

" map easier shortcut for switching tabs
noremap <leader>j :tabp<CR>
noremap <leader>k :tabn<CR>

" Shortcut to rapidly toggle `set list` which will show/hide hidden chars
nmap <leader>l :set list!<CR>
set list
" map shourtcut to trim all trailing to: \$
nmap <silent> <leader>$ :call <SID>StripTrailingWhitespaces()<CR>
" Shortcut to initialize edit command in dir of current file
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
" Shortcut to toggle spellchecker
nmap <silent> <leader>s :set spell!<CR>
" Force Saving Files that Require Root Permission
cmap w!! %!sudo tee > /dev/null %
" Resize vertical splits more easily
" TODO: fix this
"nmap <silent><leader>\> 4<c-w>\>
"nmap <silent><leader>\> 4<c-w>\>
" Resize horizontal splits more easily
nmap <silent><Leader>- 4<c-w>-
nmap <silent><Leader>= 4<c-w>+

"------------------------------------------------------------------------------
" MACROS
"------------------------------------------------------------------------------
" surround with double quotes
let @q = 'ciw"""B'
nmap <leader>" @q

" surround with single quotes
let @w = 'ciw''"''B'
nmap <leader>' @w


"------------------------------------------------------------------------------
" FUNNY FILE TYPES
"------------------------------------------------------------------------------
" set highlighting for Scons files to python
autocmd BufReadPre SConstruct set filetype=python
autocmd BufReadPre SConscript set filetype=python
" use 4 space tabs for python files
au FileType python setl tabstop=4
au FileType python setl shiftwidth=4
" Go files use tabs
au FileType go setl tabstop=4
au FileType go setl shiftwidth=4
au FileType go setl noexpandtab

" specify syntax language for non-standard file types
au BufReadPost *.less set syntax=css
" Pretend handlebars files are html
au BufNewFile,BufRead *.handlebars set filetype=html
au BufNewFile,BufRead *.hbs set filetype=html
au BufNewFile,BufRead *.soy set filetype=html


"------------------------------------------------------------------------------
" Vundle manages plugins
"------------------------------------------------------------------------------
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle required! 
Bundle 'gmarik/vundle'

" original repos on github
Bundle 'docunext/closetag.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'Shutnik/jshint2.vim'
Bundle 'scrooloose/nerdcommenter.git'
Bundle 'scrooloose/nerdtree'
Bundle 'msanders/snipmate.vim'
Bundle 'majutsushi/tagbar'
Bundle 'bling/vim-airline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'flazz/vim-colorschemes'
Bundle 'tpope/vim-fugitive'
Bundle 'jnwhiteh/vim-golang'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'plasticboy/vim-markdown'

" vim-scripts repos
Bundle 'ShowMarks'


"------------------------------------------------------------------------------
" MAC VIM
"------------------------------------------------------------------------------
" gui only options
if has("gui_running")
  set guioptions=egmrt
  " transparency, hellz yeah
  set transparency=8
  " font and size
  set guifont=Inconsolata:h16
  " tab label
  set guitablabel=%M%t
  " enable use of the mouse
  set mouse=a
  " Printing
  set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
  " use solarized color scheme
  let g:solarized_termtrans=1
  let g:solarized_termcolors=256
  let g:solarized_contrast="high"
  let g:solarized_visibility="high"
  colorscheme solarized
endif


"------------------------------------------------------------------------------
" PLUGINS
"------------------------------------------------------------------------------

" set color scheme
colorscheme jellybeans
" make background dark
hi Normal ctermbg=16

" SHOW MARKS
let g:showmarks_enable=0
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
highlight ShowMarksHLl ctermfg=white ctermbg=black
highlight ShowMarksHLu ctermfg=white ctermbg=black
highlight ShowMarksHLo ctermfg=59 ctermbg=black
highlight ShowMarksHLm ctermfg=blue ctermbg=black


" TAGBAR
nnoremap <silent> <leader>t :TagbarToggle<CR>

" CLOSETAG

" FUGITIVE

" JSHint

" NERDCOMMENTER

" NERDTREE
let NERDTreeShowHidden=1
nmap <leader>nn :NERDTree<CR>
nmap <leader>nr :NERDTreeMirror<CR>
nmap <leader>nf :NERDTreeFind<CR>
nmap <leader>nc :NERDTree<CR><C-w>p:NERDTreeFind<CR>
" hide files from NERDTree
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeIgnore = ['\.DS_Store$']

" JSLINT.VIM
"nmap <leader>s :JSLintToggle<CR>
let $JS_CMD='node'

" SNIPMATE
nmap <leader>sr :call ReloadAllSnippets()<CR>

" CTRL-P
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.git/*,*/node_modules/*,*app/components/*,*/.sass-cache/*

" SYNTASTIC
" use passive mode by default
"let g:syntastic_mode_map={ 'mode': 'passive', 'active_filetypes': ['css'], 'passive_filetypes': ['js'] }

